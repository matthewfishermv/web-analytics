metrics = c("pageviews"),
dimensions = c("source", "referralPath", "keyword")
)
View(data)
data <- google_analytics(
account,
segments = segment_ga4("AllTraffic", segment_id = "gaid::-1"),
date_range = c(ga_start_date, ga_end_date),
metrics = c("pageviews"),
dimensions = c("source", "referralPath", "signedInWithUserId")
)
data <- google_analytics(
account,
segments = segment_ga4("AllTraffic", segment_id = "gaid::-1"),
date_range = c(ga_start_date, ga_end_date),
metrics = c("pageviews"),
dimensions = c("source", "referralPath", "audienceId")
)
data <- google_analytics(
account,
segments = segment_ga4("AllTraffic", segment_id = "gaid::-1"),
date_range = c(ga_start_date, ga_end_date),
metrics = c("pageviews"),
dimensions = c("source", "referralPath", "browser")
)
View(data)
data %>%
slice_max(order_by = source, n = 10) %>%
mutate(source = reorder(source, pageviews)) %>%
ggplot(aes(x = source, y = pageviews)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(
title = "Top 10 Sources"
)
data %>%
slice_max(order_by = source, n = 10) %>%
mutate(source = reorder(source, pageviews)) %>%
ggplot(aes(x = source, y = pageviews)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(
title = "Top 10 Sources"
) +
facet_wrap(~ browser)
data %>%
slice_max(order_by = source, n = 10) %>%
mutate(source = reorder(source, pageviews)) %>%
ggplot(aes(x = source, y = pageviews)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(
title = "Top 10 Sources"
) +
facet_wrap(~ browser, scales = "free")
packages <- c("googleAnalyticsR",
"dplyr",
"lubridate",
"ggplot2")
for (p in packages) {
if (!require(p, character.only = TRUE)) {
install.packages(p)
library(p, character.only = TRUE)
}
}
# Authenticate.
googleAuthR::gar_set_client(json = ".secrets/client_secret_306994286184-usjggu1j6n5v60d4bbt7iv9aao8323ju.apps.googleusercontent.com.json")
ga_auth(email = "ga-analysis@airy-ripple-344600.iam.gserviceaccount.com",
json_file = ".secrets/airy-ripple-344600-f828fd6663de.json")
# Select the account.
accounts <- ga_account_list()
account <- accounts$viewId
# Look at a single day.
ga_start_date <- today() - years(1)
ga_end_date <- today()
data <- google_analytics(
account,
segments = segment_ga4("AllTraffic", segment_id = "gaid::-1"),
date_range = c(ga_start_date, ga_end_date),
metrics = c("pageviews"),
dimensions = c("source", "referralPath", "browser")
)
data %>%
slice_max(order_by = source, n = 10) %>%
mutate(source = reorder(source, pageviews)) %>%
ggplot(aes(x = source, y = pageviews)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(
title = "Top 10 Sources"
) +
facet_wrap(~ browser, scales = "free")
View(data)
data <- google_analytics(
account,
segments = segment_ga4("AllTraffic", segment_id = "gaid::-1"),
date_range = c(ga_start_date, ga_end_date),
metrics = c("pageviews"),
dimensions = c("source", "referralPath", "browser", "session")
)
data <- google_analytics(
account,
segments = segment_ga4("AllTraffic", segment_id = "gaid::-1"),
date_range = c(ga_start_date, ga_end_date),
metrics = c("pageviews"),
dimensions = c("source", "referralPath", "browser", "sessionDuration")
)
data <- google_analytics(
account,
segments = segment_ga4("AllTraffic", segment_id = "gaid::-1"),
date_range = c(ga_start_date, ga_end_date),
metrics = c("pageviews"),
dimensions = c("source", "referralPath", "browser", "sessionDurationBucket")
)
View(data)
data <- google_analytics(
account,
segments = segment_ga4("AllTraffic", segment_id = "gaid::-1"),
date_range = c(ga_start_date, ga_end_date),
metrics = c("pageviews"),
dimensions = c("source", "browser", "sessionDurationBucket")
)
data %>%
slice_max(order_by = source, n = 10) %>%
mutate(source = reorder(source, pageviews)) %>%
ggplot(aes(x = source, y = pageviews)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(
title = "Top 10 Sources"
) +
facet_wrap(~ browser, scales = "free")
View(data)
# Categorize session length.
data$sessionLength <- ifelse(data$sessionDurationBucket > 60, "Long", "Short")
View(data)
table(data$sessionLength)
packages <- c("googleAnalyticsR",
"dplyr",
"lubridate",
"ggplot2",
"randomForest")
for (p in packages) {
if (!require(p, character.only = TRUE)) {
install.packages(p)
library(p, character.only = TRUE)
}
}
randomForest((data))
randomForest(data)
randomForest(SessionLength ~ ., data = data)
randomForest(SessionLength ~ ., data = data)
data
head(data)
data <- google_analytics(
account,
segments = segment_ga4("AllTraffic", segment_id = "gaid::-1"),
date_range = c(ga_start_date, ga_end_date),
metrics = c("pageviews"),
dimensions = c("source", "browser", "sessionDurationBucket")
) %>%
as_tibble()
data
data %>%
randomForest()
data %>%
randomForest(SessionLength ~ .)
data %>%
randomForest(formula = SessionLength ~ .)
rf <- data %>%
randomForest(formula = SessionLength ~ .)
plot(rf)
View(rfd)
View(rf)
# Create test-train split.
n <- nrow(data)
n
# Create test-train split.
test <- data[1]
data[1]
data[1,]
data[0,]
data[1:1000,]
# Create test-train split.
train <- data[1:750,]
test <- data[751:1000,]
head(train)
head(test)
nrow(c(train, test))
nrow(bind_rows(train, test))
table(train[, c('source', 'browser', 'pageviews')])
# Categorize session length.
data$sessionLength <-
as.factor(ifelse(data$sessionDurationBucket > 60, "Long", "Short"))
data
View(data)
# Create test-train split.
train <- data[1:750, ]
test <- data[751:1000, ]
rf <- data %>%
randomForest(formula = SessionLength ~ .)
rf
packages <- c("googleAnalyticsR",
"dplyr",
"lubridate",
"ggplot2",
"randomForest",
"caret")
for (p in packages) {
if (!require(p, character.only = TRUE)) {
install.packages(p)
library(p, character.only = TRUE)
}
}
confusionMatrix(rf)
?train
set.seed(3487)
model <- train(SessionLength ~ ., data = train)
model <- data %>% train(SessionLength ~ .)
model <- data %>% train(SessionLength ~ segment)
model <- data %>% train(SessionLength ~ source + browser)
model <- data %>% train(SessionLength ~ source + browser, data =.)
model <- train %>% train(SessionLength ~ source + browser, data =.)
train
model <- train %>% train(sessionLength ~ source + browser, data =.)
set.seed(3487)
model <- train %>% train(sessionLength ~ .)
packages <- c("googleAnalyticsR",
"dplyr",
"lubridate",
"ggplot2",
"randomForest",
"caret")
for (p in packages) {
if (!require(p, character.only = TRUE)) {
install.packages(p)
library(p, character.only = TRUE)
}
}
rm(train)
rm(test)
packages <- c("googleAnalyticsR",
"dplyr",
"lubridate",
"ggplot2",
"randomForest",
"caret")
for (p in packages) {
if (!require(p, character.only = TRUE)) {
install.packages(p)
library(p, character.only = TRUE)
}
}
# Categorize session length.
data$sessionLength <-
as.factor(ifelse(data$sessionDurationBucket > 60, "Long", "Short"))
# Create test-train split.
train.data <- data[1:750, ]
test.data <- data[751:1000, ]
set.seed(3487)
model <- train.data %>% train(sessionLength ~ .)
?train
model <- train.data %>% train(sessionLength ~ ., method = "rf")
model <- train(sessionLength ~ ., data = train.data, method = "rf")
model <- train(sessionLength ~ browser, data = train.data, method = "rf")
set.seed(3487)
model <-
train(sessionLength ~ source + browser + pageviews,
data = train.data,
method = "rf")
set.seed(3487)
model <-
train(sessionLength ~ source + browser + pageviews,
data = train.data,
method = "rf",
trControl = trainControl(method = 'cv', number = 10))
model
summary(model)
train
train.data
packages <- c("googleAnalyticsR",
"dplyr",
"lubridate",
"ggplot2",
"rpart",
"randomForest",
"caret")
for (p in packages) {
if (!require(p, character.only = TRUE)) {
install.packages(p)
library(p, character.only = TRUE)
}
}
# Run decision tree classifier.
set.seed(4844)
model.rf <-
train(sessionLength ~ source + browser + pageviews,
data = train.data,
method = "rf",
trControl = trainControl(method = 'cv', number = 10))
# Run decision tree classifier.
set.seed(4844)
model.dt
model.dt <- rpart(sessionLength ~ source + browser + pageviews,
data = train.data,
)
?rpart
model.dt
plot(model.dt)
rpart.plot(model.dt)
packages <- c("googleAnalyticsR",
"dplyr",
"lubridate",
"ggplot2",
"rpart",
"randomForest",
"caret",
"rpart.plot")
for (p in packages) {
if (!require(p, character.only = TRUE)) {
install.packages(p)
library(p, character.only = TRUE)
}
}
rpart.plot(model.dt)
model.dt <- rpart(sessionLength ~ .,
data = train.data,
)
rpart.plot(model.dt)
# Run decision tree classifier.
set.seed(4844)
model.dt <- rpart(sessionLength ~ .,
data = train.data,
)
# Run decision tree classifier.
set.seed(4844)
model.dt <- rpart(sessionLength ~ .,
data = train.data,
)
rpart.plot(model.dt)
# Evaluate results.
pred <- predict(model.dt, train, type = "class")
model.dt <- rpart(sessionLength ~ .,
data = train.data,
method = "class"
)
# Run decision tree classifier.
set.seed(4844)
model.dt <- rpart(sessionLength ~ .,
data = train.data,
method = "class"
)
rpart.plot(model.dt)
rpart.plot(model.dt)
# Evaluate results.
pred <- predict(model.dt, train, type = "class")
model.dt
names(data)
# Run decision tree classifier.
set.seed(4844)
model.dt <- rpart(sessionLength ~ source + browser + pageviews,
data = train.data,
method = "class"
)
rpart.plot(model.dt)
model.dt
text(model.dt)
data <- google_analytics(
account,
segments = segment_ga4("AllTraffic", segment_id = "gaid::-1"),
date_range = c(ga_start_date, ga_end_date),
metrics = c("pageviews"),
dimensions = c("source", "browser", "sessionDurationBucket", "keyword", "")
) %>%
as_tibble()
data <- google_analytics(
account,
segments = segment_ga4("AllTraffic", segment_id = "gaid::-1"),
date_range = c(ga_start_date, ga_end_date),
metrics = c("pageviews"),
dimensions = c("source", "browser", "sessionDurationBucket", "keyword")
) %>%
as_tibble()
data %>%
slice_max(order_by = source, n = 10) %>%
mutate(source = reorder(source, pageviews)) %>%
ggplot(aes(x = source, y = pageviews)) +
geom_bar(stat = "identity") +
coord_flip() +
labs(title = "Top 10 Sources") +
facet_wrap( ~ browser, scales = "free")
# Categorize session length.
data$sessionLength <-
as.factor(ifelse(data$sessionDurationBucket > 60, "Long", "Short"))
# Create test-train split.
train.data <- data[1:750,]
test.data <- data[751:1000,]
# Run random forest ensemble.
set.seed(3487)
model.rf <-
train(
sessionLength ~ source + browser + pageviews,
data = train.data,
method = "rf",
trControl = trainControl(method = 'cv', number = 10)
)
# Run decision tree classifier.
set.seed(4844)
model.dt <- rpart(sessionLength ~ source + browser + pageviews,
data = train.data,
method = "class")
rpart.plot(model.dt)
# Run decision tree classifier.
set.seed(4844)
model.dt <- rpart(sessionLength ~ source + browser + pageviews + keyword,
data = train.data,
method = "class")
rpart.plot(model.dt)
# Run decision tree classifier.
set.seed(4844)
model.dt <- rpart(sessionLength ~ source + browser + keyword,
data = train.data,
method = "class")
rpart.plot(model.dt)
model.dt
# Evaluate results.
pred <- predict(model.dt, train, type = "class")
# Evaluate results.
pred <- predict(model.dt, test, type = "class")
# Evaluate results.
pred <- predict(model.dt, train.data, type = "class")
pred
summary(pred)
confusionMatrix(pred)
# Evaluate results.
pred <- predict(model.dt, test.data, type = "class")
# Evaluate results.
pred <- predict(model.dt, train.data, type = "class")
confusionMatrix(pred)
confusionMatrix(pred, reference = train.data$sessionLength)
# Evaluate results.
pred <- predict(model.dt, train.data$sessionLength, type = "class")
# Create test-train split.
train.data <- data[1:750,]
test.data <- data[751:1000,]
# Run random forest ensemble.
set.seed(3487)
model.rf <-
train(
sessionLength ~ source + browser + pageviews,
data = train.data,
method = "rf",
trControl = trainControl(method = 'cv', number = 10)
)
# Run decision tree classifier.
set.seed(4844)
model.dt <- rpart(sessionLength ~ source + browser + keyword,
data = train.data,
method = "class")
rpart.plot(model.dt)
# Evaluate results.
pred <- predict(model.dt, train.data$sessionLength, type = "class")
# Evaluate results.
pred <- predict(model.dt, train.data, type = "class")
pred
confusionMatrix(pred, reference = train.data$sessionLength)
# Evaluate results.
pred <- predict(model.dt, test.data, type = "class")
test.data
# Reset factors.
levels(test.data$keyword)
# Reset factors.
levels(train.data$keyword)
as.factor(data$keyword)
data$keyword <- as.factor(data$keyword)
# Create test-train split.
train.data <- data[1:750,]
test.data <- data[751:1000,]
# Reset factors.
levels(train.data$keyword)
levels(test.data$keyword) <- leves
# Run decision tree classifier.
set.seed(4844)
model.dt <- rpart(sessionLength ~ source + browser + keyword,
data = train.data,
method = "class")
rpart.plot(model.dt)
# Run decision tree classifier.
set.seed(4844)
model.dt <- rpart(sessionLength ~ source + browser + keyword,
data = train.data,
method = "class")
rpart.plot(model.dt)
# Evaluate results.
pred <- predict(model.dt, test.data, type = "class")
confusionMatrix(pred, reference = train.data$sessionLength)
# Evaluate results.
pred <- predict(model.dt, test.data, type = "class")
pred
table(test.data$sessionLength, pred)
# Evaluate results.
pred <- predict(model.dt, test.data, type = "class")
table(test.data$sessionLength, pred)
nrow(pred)
length(pred)
length(test.data$sessionLength)
View(test.data$sessionLength)
table(test.data$sessionLength)
summary(model.dt)
summary(model.rf)
predict(model.rf, test.data, type = "class")
predict(model.rf, test.data, type = "prob")
